Imagine you are software engineer experienced in node.js, typescript and postgresql. you are tasked with building the following. 

Project: Multi-Tenant Org/Team/Roles Infrastructure

Goal: Design and implement the core system that models:
●	Organizations (parent companies)
●	Teams/Departments within an org
●	Role Types & Permissions (Org Admin, Team Manager, Member, Auditor)
●	Memberships, Invites, and Access Control

The application should be multi-tenant (strict org isolation), secure, and production-minded (idempotent, auditable, and scalable).

Tech context (use our stack)
●	Backend: Node + TypeScript
●	DB: Postgres (Neon); Drizzle ORM preferred
●	Host assumptions: Vercel (local run is fine)
●	API: REST (OpenAPI spec)
●	Use npm libraries as required. Please update the config files and also create an .env file with test values

________________________________________
What to Build
A) Data Model & Boundaries
Design tables for:
●	organizations
●	teams (belongs to an organization)
●	users (global)
●	memberships (user ↔ org with org-level role)
●	team_memberships (user ↔ team with team-level role)
●	role_types (define roles + permission bits)
●	invites (org-scoped, email-based, one-time, expiring)
●	audit_events (standardized “who/what/when/from where”)

Constraints to enforce
●	All queries are org-scoped; prevent cross-tenant leakage
●	A user can belong to multiple orgs with different roles
●	Team membership must reference an org-consistent user
●	Soft delete support for orgs/teams with cascade rules
●	Idempotency for invites and role changes (upsert patterns)

Deliverables
●	ERD (PNG/SVG)
●	Drizzle schema + SQL migrations
________________________________________
B) Role & Permission Model (RBAC)
Define a minimal permission matrix such as:
●	OrgAdmin: all org + team actions
●	TeamManager: manage members and assignments in their teams
●	Member: read + contribute in their teams
●	Auditor: read-only across org

Provide a tiny authorization module (middleware or helper) that checks:
●	“Does caller have org:manage?”
●	“Does caller have team:manage for Team X?”
●	“Is caller at least read-permitted for this org/team?”

________________________________________
C) Core API Endpoints
Provide handlers + OpenAPI for:

Org/Team lifecycle
●	POST /orgs → create org (first creator becomes OrgAdmin)
●	POST /orgs/:orgId/teams → create team in org
●	GET /orgs/:orgId/teams → list teams (paginated)

Membership & Roles
●	POST /orgs/:orgId/invites → invite by email, role, optional team
●	POST /invites/:token/accept → accept invite → create membership(s)
●	POST /orgs/:orgId/members/:userId/role → change org role (idempotent)
●	GET /orgs/:orgId/members → list members with roles (paginated)

Access control proof
●	Demonstrate that a user in multiple orgs gets only the correct data per org
●	Return 403 with a consistent error shape when checks fail

Audit
●	Every mutating endpoint writes a row to audit_events

________________________________________
D) Seed & Scenario Script
A single script (TS/Node) that seeds:
● Orgs: Acme, Globex
● Teams: Acme → Sales, Partnerships; Globex → CS, Ops
● Users:
	-- Alice (OrgAdmin @ Acme, TeamManager @ Acme/Partnerships)
	-- Bob (Member @ Acme/Sales)
	-- Carol (Auditor @ Acme)
	-- Dan (OrgAdmin @ Globex)
● Invites: pending invite for eve@example.com to Acme/Sales (Member)

Include curl or HTTPie examples (or a Postman collection) that:
1.	Create Acme, create Partnerships team
2.	Invite Bob to Acme/Partnerships as Member → accept invite via token
3.	List members by org; verify visibility and roles
4.	Attempt cross-org access → verify 403
